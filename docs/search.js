window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "numbat", "modulename": "numbat", "kind": "module", "doc": "<p><code>numbat</code>: NumPy+Jax with named axes and an uncompromising attitude</p>\n\n<h1 id=\"license\">License</h1>\n\n<p>Copyright (C) 2025 Justin Domke - All Rights Reserved</p>\n\n<p>Licensed under the GNU Affero General Public License, Version 3.0 (the \"License\"); you may not\nuse this file except in compliance with the License. You may obtain a copy of the License at\n<a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\">https://www.gnu.org/licenses/agpl-3.0.en.html</a></p>\n\n<p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\neven the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>\n\n<h1 id=\"requirements\">Requirements</h1>\n\n<ul>\n<li>Python 3.10+</li>\n<li>Numpy</li>\n<li>Jax</li>\n<li><a href=\"https://github.com/pwwang/python-varname\">varname</a> (Optional: For magical axis naming.)</li>\n</ul>\n\n<h1 id=\"installation\">Installation</h1>\n\n<ol>\n<li>It's a single file.</li>\n<li>Download it and put it in a directory.</li>\n<li>Done!</li>\n</ol>\n\n<h1 id=\"how-do-i\">How do I...</h1>\n\n<h2 id=\"create-named-tensors\">...create named tensors?</h2>\n\n<p>See <code>ntensor.__init__</code>, <code>ones</code>, <code>zeros</code>, <code>randn</code>.</p>\n\n<p>TODO: add rand, others?</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [0 1 2]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">cats</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">dogs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {cats:2, dogs:3}</span>\n<span class=\"go\">[[1. 1. 1.]</span>\n<span class=\"go\"> [1. 1. 1.]]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"manipulate-named-tensors\">...manipulate named tensors?</h2>\n\n<p>See <code>concatenate</code>, <code>stack</code></p>\n\n<h2 id=\"do-inneroutermatrixtensor-products-or-einstein-summation\">...do inner/outer/matrix/tensor products or einstein summation?</h2>\n\n<p>See <code>dot</code>. It does it all. This is the only function you need. Or, equivalently, use the <code>@</code> operator which\nwill call <code>dot</code> for you.</p>\n\n<h6 id=\"examples-2\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2} [9 5]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2} [9 5]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">B</span>\n<span class=\"go\">&lt;ntensor {i:2} [9 5]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">@</span> <span class=\"n\">A</span>\n<span class=\"go\">&lt;ntensor {i:2} [9 5]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"do-standard-scalar-operations\">...do standard scalar operations?</h2>\n\n<p>See <code>abs</code>, <code>acos</code>, <code>acosh</code>, ..., <code>relu</code>.</p>\n\n<h6 id=\"examples-3\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {dog:3} [3 0 3]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {dog:3} [0 0 3]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"do-standard-pairwise-operations\">...do standard pairwise operations?</h2>\n\n<p>See <code>add</code>, <code>arctan2</code>, ..., <code>true_divide</code>. Or use operator overloading.</p>\n\n<h6 id=\"examples-4\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [10 11 12]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">+</span><span class=\"n\">B</span>\n<span class=\"go\">&lt;ntensor {i:3} [10 11 12]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">/</span><span class=\"n\">C</span>\n<span class=\"go\">&lt;ntensor {i:3, j:2}</span>\n<span class=\"go\">[[0.   0.  ]</span>\n<span class=\"go\"> [0.1  0.05]</span>\n<span class=\"go\"> [0.2  0.1 ]]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"do-standard-reductions\">...do standard reductions?</h2>\n\n<p>See <code>all</code>, <code>any</code>, ..., <code>var</code></p>\n\n<h6 id=\"examples-5\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],[</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"kc\">False</span><span class=\"p\">,</span><span class=\"kc\">True</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} False&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;ntensor {} False&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {j:3} [ True False  True]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2} [ True False]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;ntensor {j:3} [8. 8. 8.]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;ntensor {j:3} [8. 8. 8.]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;ntensor {i:2, j:3}</span>\n<span class=\"go\">[[4. 4. 4.]</span>\n<span class=\"go\"> [4. 4. 4.]]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"use-standard-jax-functions\">...use standard jax functions?</h2>\n\n<p>See <code>lift</code>.</p>\n\n<h6 id=\"examples-6\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fun</span> <span class=\"o\">=</span> <span class=\"n\">lift</span><span class=\"p\">(</span><span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i j, k-&gt;l&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">&#39;k&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {l:2} [0.5  0.25]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"do-linear-algebra\">...do linear algebra?</h2>\n\n<p>See <code>inv</code>, <code>solve</code>. Or use <code>lift</code>.</p>\n\n<h2 id=\"index-arrays\">...index arrays?</h2>\n\n<p>See <code>ntensor.__call__</code>, which is achieved with <em>parentheses</em>, not square brackets.</p>\n\n<h6 id=\"examples-7\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span><span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} 30&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"o\">=</span><span class=\"n\">dog</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;ntensor {dog:2} [20 40]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=10, k=30)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=10)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, j=10, k=15)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;l&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">j_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;l&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]],</span> <span class=\"s1\">&#39;m&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i_index</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j_index</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k_index</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(l=3, m=2, n=4)</span>\n</code></pre>\n</div>\n\n<h2 id=\"take-gradients\">...take gradients?</h2>\n\n<p>See <code>grad</code> and <code>value_and_grad</code></p>\n\n<h6 id=\"examples-8\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">4.</span><span class=\"p\">,</span> <span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"mf\">6.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [4. 5. 6.]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">dot</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [1. 2. 3.]&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"do-batchedvmapped-operations\">...do batched/vmapped operations?</h2>\n\n<p>See <code>batch</code>, <code>vmap</code>, <code>wrap</code>, <code>scan</code>.</p>\n\n<h2 id=\"get-a-plain-numpy-array\">...get a plain numpy array?</h2>\n\n<p>See <code>ntensor.numpy</code></p>\n\n<h2 id=\"do-signal-processing\">...do signal processing?</h2>\n\n<p>See <code>convolve</code></p>\n\n<h1 id=\"key-features\">Key features</h1>\n\n<ol>\n<li><p>Numpy provides a huge number of \"dot\"-type routines, each with their own conventions.\nThere's <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.dot.html#numpy.dot\"><code>np.dot</code></a>, <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.inner.html#numpy.inner\"><code>np.inner</code></a>, <a href=\"https://numpy.org/doc/stable/reference/generated/numpy.outer.html#numpy.outer\"><code>np.outer</code></a>,\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.matmul.html#numpy.matmul\"><code>np.matmul</code></a>\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.linalg.multi_dot.html#numpy\n.linalg.multi_dot\"><code>np.linalg.multi_dot</code></a>,\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.tensordot.html#numpy.tensordot\"><code>np.tensordot</code></a>, and\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.einsum.html#numpy.einsum\"><code>np.einsum</code></a>.\nEach of these has their own dimensional ordering conventions. What does <code>np.dot(a,b)</code> do when <code>a</code> and\n<code>b</code> are high-dimensional? Does anyone remember?</p>\n\n<p>In ntensor, there's only one function, <code>dot</code>, and only one (fairly simple) rule to remember.</p></li>\n<li><p>Numpy indexing is comically complex. You've got \"basic\" indexing, \"advanced boolean\" indexing,\n\"advanced vectorized\" indexing and \"advanced mixed\" indexing. And \"advanced\" indexing has\nsome confusing special cases that few people understand.</p>\n\n<p>If you only use slices, integers, and <code>None</code> (aka <code>np.newaxis</code>), it's <em>relatively</em> simple. Writing <code>x[\n17, None, 3, ..., 2:29:2, None]</code> is fine. But  what if you want to take the <code>k</code>th element from the\n<code>n</code>th axis? You're left writing something like</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">ndim</span><span class=\"p\">)]]</span> <span class=\"c1\"># eek</span>\n</code></pre>\n</div>\n\n<p>And advanced indexing is really crazy. I mean, look at this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">onp</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],:,:]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">(3, 70, 80)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],:,[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],:]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">(3, 60, 80)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],:,:,[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">(3, 60, 70)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[:,[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],:]</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"c1\"># !?</span>\n<span class=\"go\">(50, 3, 80)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[:,[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],:,[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">(3, 50, 70)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[:,:,[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"c1\"># !?</span>\n<span class=\"go\">(50, 60, 3)</span>\n</code></pre>\n</div>\n\n<p>Yes, that is what happens. <em>This is Numpy behaving <strong>as designed</strong>.</em></p>\n\n<p>Also, Numpy doesn't (<a href=\"https://numpy.org/neps/nep-0021-advanced-indexing.html\">currently</a>) support\n\"outer\" indexing, where you'd (say) get each combination of the 2nd/4th/5th rows and 1st/5th columns.\nYou can achieve this using utilities\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.ix_.html\"><code>np.ix_</code></a> and\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.ogrid.html\"><code>np.ogrid</code></a> and\n<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.mgrid.html\"><code>np.mgrid</code></a>, but that\nthat's even more complexity.</p>\n\n<p>In ntensor, you don't need any of this stuff. There is just one indexing rule. It's <em>sort</em> of like\nalways using numpy advanced indexing all the time, except (1) it's really easy because all the axes are\nnamed, and (2) it's much easier because you don't have to worry about the order and (3) you don't need\nall these crazy utility functions. You can probably understand it just from looking at these examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=10, j=20, l=40)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(j=20, l=40)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">idx</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=10, j=20, m=3, l=40)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=3, j=3, k=30, l=40)</span>\n</code></pre>\n</div></li>\n<li><p>Manually batching everything is incredibly tedious and error-prone. Need to remember what axis\ncorresponds to what meaning. Gets out of control with complex cases.</p></li>\n</ol>\n"}, {"fullname": "numbat.Axis", "modulename": "numbat", "qualname": "Axis", "kind": "class", "doc": "<p>An axis is a unique axis label. It's <em>basically</em> just a string but with a few tricks to make\nnotation nicer. For convenience, axes evaluate as to equal to their strings. Axes are equal based on\nnames, not object identity.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;cat&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;dog&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cat</span> <span class=\"o\">==</span> <span class=\"n\">dog</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cat</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;cat&#39;</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cat</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;dog&#39;</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n"}, {"fullname": "numbat.Axis.__init__", "modulename": "numbat", "qualname": "Axis.__init__", "kind": "function", "doc": "<p>Create an <code>Axis</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name:</strong>: Create an axis with the given name. If <code>None</code>, then try to detect name being assigned to\nwith evil magics.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span>\n<span class=\"go\">Axis(&#39;time&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;time&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;time&#39;</span> <span class=\"c1\"># can compare to strings</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">time</span> <span class=\"o\">==</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># can compare to other Axis with same name</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;time&#39;</span><span class=\"p\">))</span> <span class=\"c1\"># even though different objects</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">()</span> <span class=\"c1\"># evil magic</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">days</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;days&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">days</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;days&#39;</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">days</span> <span class=\"o\">==</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;days&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s2\">&quot;bob&quot;</span><span class=\"p\">)</span> <span class=\"c1\"># this is almost certainly a bad idea</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alice</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;bob&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alice</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;bob&#39;</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">alice</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;alice&#39;</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "numbat.Axis.__getitem__", "modulename": "numbat", "qualname": "Axis.__getitem__", "kind": "function", "doc": "<p>@public</p>\n\n<p>You can index into an <code>Axis</code> for nicer syntactic sugar when indexing an <code>ntensor</code>. If <code>x</code> is\nan <code>ntensor</code> with some <code>Axis</code> <code>ax</code>, then if you do <code>x(ax=ax[(1,2,3)])</code>, that's equivalent to\n<code>x(ax=ntensor((1,2,3),'ax'))</code>.</p>\n\n<p>If you do <code>x(ax=ax[1:10:3])</code>, that's equivalent to <code>x(ax=IndexedAxis(ax,slice(1,10,3)))</code> which is\nin turn equivalent to <code>x(ax=NTensor(np.arange(x.shape['ax'])[1:10:3])</code>.</p>\n\n<p>This is achieved by making <code>ax[...]</code> do slightly tricky stuff, which is this function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item</strong> (slice | ArrayLike):\nIf this is a slice, then returns an <code>IndexedAxis</code>. If this is anything that can be cast\nto a 1D numpy array, then this returns an <code>ntensor</code>. Anything else is an error.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>OK: Numpy arrays or things castable to them.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[</span><span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])]</span>\n<span class=\"go\">&lt;ntensor {cats:4} [7 5 2 9]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[(</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">)]</span>\n<span class=\"go\">&lt;ntensor {cats:4} [7 5 2 9]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;ntensor {cats:4} [7 5 2 9]&gt;</span>\n</code></pre>\n</div>\n\n<p>Also OK: slices.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[:]</span>\n<span class=\"go\">IndexedAxis(cats, slice(None, None, None))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"go\">IndexedAxis(cats, slice(1, 20, 3))</span>\n</code></pre>\n</div>\n\n<p>Not OK: Integers. (Since 0-dimensional arrays don't have shapes, this has no purpose.)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Axis index castable to numpy array, but got 0 dims (must be 1)</span>\n</code></pre>\n</div>\n\n<p>Not OK: <code>ntensor</code> (What would <code>x(ax=ax[y])</code> mean if <code>y</code> is <code>ntensor</code>? Allowing this would lead to\nconfusion.)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[</span><span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Can&#39;t index an Axis with an NTensor (1-D numpy array OK).</span>\n</code></pre>\n</div>\n\n<p>Not OK: Thing castable to 2+ dimensional numpy arrays. (We only have 1 <code>Axis</code>!)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span><span class=\"p\">[((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">))]</span> <span class=\"c1\"># 2d index not allowed!</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Axis index castable to numpy array, but got 2 dims (must be 1)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor", "modulename": "numbat", "qualname": "ntensor", "kind": "class", "doc": "<p>An array is the base type of this package. The first thing about <code>array</code>s is that you can\ncreate them. The second thing about <code>array</code>s is that you can (elegantly) index them. The third\nthing about <code>array</code>s is you can call functions on them.</p>\n\n<p>For core usage, see:</p>\n\n<ul>\n<li><code>__init__</code> for creating arrays</li>\n<li><code>axes</code> for getting the axes</li>\n<li><code>__call__</code> for indexing</li>\n<li><code>__getitem__</code> for converting to</li>\n</ul>\n"}, {"fullname": "numbat.ntensor.__init__", "modulename": "numbat", "qualname": "ntensor.__init__", "kind": "function", "doc": "<p>Create an array from some block of data. This is familiar from other array languages,\nexcept you must provide axis names if there are more than 0 dimensions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data</strong>: An array or  <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.typing.ArrayLike.html\">ArrayLike</a>\nthat can be cast to a numpy array.</li>\n<li><strong>*axes</strong>: <code>Axis</code> or strings. Must have same length as number of dimensions of data.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Zero dimensional arrays have no dimensions, and so don't have axis names</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mf\">137.036</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} 137.036&gt;</span>\n</code></pre>\n</div>\n\n<p>Arrays with at least one dimension must have axis names</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {cats:3} [11 22 33]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">5.5</span><span class=\"p\">],</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:1} [5.5]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"s1\">&#39;row&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;col&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {row:2, col:3}</span>\n<span class=\"go\">[[1 2 3]</span>\n<span class=\"go\"> [4 5 6]]&gt;</span>\n</code></pre>\n</div>\n\n<p>You can create an explicit <code>Axis</code> objects first if you want. This is <em>completely equivalent</em>. (If you\npass strings, they are automatically converted into <code>Axis</code> object for you.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cats</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">],</span> <span class=\"n\">cats</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {cats:3} [11 22 33]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Buffer</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span></span>)</span>"}, {"fullname": "numbat.ntensor.dtype", "modulename": "numbat", "qualname": "ntensor.dtype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "numbat.ntensor.axes", "modulename": "numbat", "qualname": "ntensor.axes", "kind": "variable", "doc": "<p>The Axis objects. It's a set, because axes <em>don't have an order</em> (that you're supposed to\nthink about).</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"s2\">&quot;day&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;person&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;day&#39;</span><span class=\"p\">),</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;person&#39;</span><span class=\"p\">)}</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">axes</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">&#39;day&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;person&#39;</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "annotation": ": frozenset[numbat.Axis]"}, {"fullname": "numbat.ntensor.ndim", "modulename": "numbat", "qualname": "ntensor.ndim", "kind": "variable", "doc": "<p>The number of dimensions. Equal to <code>len(axes)</code></p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span><span class=\"s1\">&#39;rows&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;cols&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">ndim</span>\n<span class=\"go\">2</span>\n</code></pre>\n</div>\n", "annotation": ": int"}, {"fullname": "numbat.ntensor.shape", "modulename": "numbat", "qualname": "ntensor.shape", "kind": "variable", "doc": "<p>The shape is a <em>dict</em> mapping axes to ints.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span><span class=\"s1\">&#39;record&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;hour&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(record=2, hour=3)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{record:2, hour:3}</span>\n</code></pre>\n</div>\n", "annotation": ": numbat.ShapeDict"}, {"fullname": "numbat.ntensor.numpy_broadcasted", "modulename": "numbat", "qualname": "ntensor.numpy_broadcasted", "kind": "function", "doc": "<p>Convert to a (Jax) numpy array, by providing order for axes.\nIf you provide an axis that doesn't exist, a new one with a singleton dimension\nwill be created</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*axes</strong>: The axes, in order. Must include all axes present in self.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Zero dimensional array</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span>\n<span class=\"go\">&lt;ntensor {} 5&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">())</span>\n<span class=\"go\">5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[[5]]</span>\n</code></pre>\n</div>\n\n<p>Two-dimensional array</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[[1 2 3]</span>\n<span class=\"go\"> [4 5 6]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">(</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[[1 4]</span>\n<span class=\"go\"> [2 5]</span>\n<span class=\"go\"> [3 6]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy_broadcasted</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;l&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">(2, 1, 3, 1)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">jax</span><span class=\"o\">.</span><span class=\"n\">Array</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.numpy", "modulename": "numbat", "qualname": "ntensor.numpy", "kind": "function", "doc": "<p>Convert to a (Jax) numpy array, by providing order for axes.</p>\n\n<p>Unlike numpy_broadcasted, you cannot provide new axes. Also, if self has only 1 dimension,\nit's acceptable to skip it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*axes</strong>: The axes, in order. Must have equal number as dimensions, unless number of dimensions is one,\nin which case it can be skipped</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Zero dimensional array</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span>\n<span class=\"go\">&lt;ntensor {} 5&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">())</span>\n<span class=\"go\">5</span>\n</code></pre>\n</div>\n\n<p>One dimensional array</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[1 2 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">())</span>\n<span class=\"go\">[1 2 3]</span>\n</code></pre>\n</div>\n\n<p>Two-dimensional array</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[[1 2 3]</span>\n<span class=\"go\"> [4 5 6]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">(</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">[[1 4]</span>\n<span class=\"go\"> [2 5]</span>\n<span class=\"go\"> [3 6]]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">jax</span><span class=\"o\">.</span><span class=\"n\">Array</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__add__", "modulename": "numbat", "qualname": "ntensor.__add__", "kind": "function", "doc": "<p>@public\nDo fully-batched addition. Unlike <code>add</code>, this seamlessly handles arrays of any shape with\nfull automatic broadcasting.</p>\n\n<p><code>A+B</code> is equivalent to <code>add(self, other)</code>, i.e. maps over all axes.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">+</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">&#39;cats&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dogs&#39;</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__sub__", "modulename": "numbat", "qualname": "ntensor.__sub__", "kind": "function", "doc": "<p>@public\nDo fully-batched substraction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__mul__", "modulename": "numbat", "qualname": "ntensor.__mul__", "kind": "function", "doc": "<p>@public\nDo fully-batched multiplication.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__truediv__", "modulename": "numbat", "qualname": "ntensor.__truediv__", "kind": "function", "doc": "<p>@public\nDo fully-batched division.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__pow__", "modulename": "numbat", "qualname": "ntensor.__pow__", "kind": "function", "doc": "<p>@public\nDo fully-batched powers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__matmul__", "modulename": "numbat", "qualname": "ntensor.__matmul__", "kind": "function", "doc": "<p>@public</p>\n\n<p>Do einstein summation on two arrays, taking reductions over all shared axes. This is equivalent to\nan alias for <code>dot(self, other)</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>other</strong> (ntensor):</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>result</strong> (ntensor):\nresult of Einstein summation on two arrays.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">B</span>\n<span class=\"go\">&lt;ntensor {} 7&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">B</span>\n<span class=\"go\">&lt;ntensor {i:2, j:2}</span>\n<span class=\"go\">[[0 0]</span>\n<span class=\"go\"> [0 2]]&gt;</span>\n</code></pre>\n</div>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>dot</code>  </p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ntensor.__call__", "modulename": "numbat", "qualname": "ntensor.__call__", "kind": "function", "doc": "<p>@public</p>\n\n<p>Index this array. All indexing follows the One True Rule:</p>\n\n<ul>\n<li>All axes must be indexed.</li>\n<li>All indices are themselves <code>arrays</code>.</li>\n<li>The axes of the indices determine the output axes.</li>\n<li>Non-shared axes in indices are orthogonal.</li>\n<li>Shared axes in indices are pointwise. (And must therefore have equal lengths!)</li>\n</ul>\n\n<p>That's it. That's the only <em>real</em> rule. (Cf. numpy's <a href=\"https://numpy.org/doc/stable/user/basics.indexing.html#advanced-indexing\">insanely complex advanced indexing\nrules</a>.) But to\nmake things nicer, we offer some ergonomic syntactic sugar.</p>\n\n<ol>\n<li>If you don't explicitly index an input axis, it is implicitly fully sliced,\nwith itself as an output axis.</li>\n<li>You can slice an input axis and then use that as an index.</li>\n<li>You can index any axis (input or not) with a slice or 1-d list/tuple/numpy array. This\nis treated like a 1-d array with that axis.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (ntensor):</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>You <em>can't</em> index arrays without giving names for axes. If you try, you get an error. (I\n<em>told</em> you this package was uncompromising, right?)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># Nope. No! Doesn&#39;t work!</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Can&#39;t index NTensor with int. (Remember, A[i] converts to numpy)</span>\n</code></pre>\n</div>\n\n<p>You do it like this, always with keywork arguments for axes.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># yes!</span>\n<span class=\"go\">&lt;ntensor {} 30&gt;</span>\n</code></pre>\n</div>\n\n<p>Here are examples illustrating the one true rule</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">j_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i_index</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j_index</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{n:2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">j_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;m&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i_index</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j_index</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{n:2, m:2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]],</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;l&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">j_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"s1\">&#39;l&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">],</span><span class=\"s1\">&#39;m&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i_index</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j_index</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k_index</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{k:2, l:3, m:4}</span>\n</code></pre>\n</div>\n\n<p>You can re-use input as output dimensions if you want. This changes nothing! It's\nequivalent to using all new dimensions and then relabeling.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]],</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">j_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k_index</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">],</span><span class=\"s1\">&#39;m&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i_index</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"n\">j_index</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k_index</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{k:2, i:3, m:4}</span>\n</code></pre>\n</div>\n\n<p>Examples using syntacic sugar for numbers or 1-d lists/tuple/numpy arrays or slices as\nindices</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"mi\">75</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">105</span><span class=\"p\">,</span><span class=\"mi\">120</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>                    <span class=\"c1\"># ints work</span>\n<span class=\"go\">&lt;ntensor {} 45&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">])</span>              <span class=\"c1\"># lists work</span>\n<span class=\"go\">&lt;ntensor {i:3} [45 15 90]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]))</span>    <span class=\"c1\"># numpy arrays work</span>\n<span class=\"go\">&lt;ntensor {i:3} [45 15 90]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;ntensor {i:3} [105  75  45]&gt;</span>\n</code></pre>\n</div>\n\n<p>Remember, using numbers or 1D lists/tuples/numpy arrays or slices is just syntactic sugar!</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"mi\">75</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">105</span><span class=\"p\">,</span><span class=\"mi\">120</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">==</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;ntensor {} True&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"n\">jnp</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]),</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;ntensor {i:3} [ True  True  True]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;ntensor {i:3} [ True  True  True]&gt;</span>\n</code></pre>\n</div>\n\n<p>You can index an Axis as a shortcut to create a new array.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">45</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">,</span><span class=\"mi\">75</span><span class=\"p\">,</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">105</span><span class=\"p\">,</span><span class=\"mi\">120</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[:])</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{i:8}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">[:])</span> <span class=\"o\">==</span> <span class=\"n\">A</span>\n<span class=\"go\">&lt;ntensor {i:8} [ True  True  True  True  True  True  True  True]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">j</span><span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]])</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{j:3}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">j</span><span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]])</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"n\">j</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;ntensor {j:3} [ True  True  True]&gt;</span>\n</code></pre>\n</div>\n\n<p>You can also index with a <em>slice</em> from another input index. (You can <em>only</em> slice axes that exist\nin the <code>NTensor</code> since otherwise the shape would be ambiguous.)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.concatenate", "modulename": "numbat", "qualname": "concatenate", "kind": "function", "doc": "<p>Concatenate a sequence of NTensors into a NTensor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arrays</strong> (Iterable[ntensor]):\nThe tensors must have the same shape except in the dimension axis</li>\n<li><strong>axis</strong> (str|Axis):\nThe axis along which to be joined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (ntensor):\nThe concatenated ntensor</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>stack</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:4} [1 2 3 4]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">],</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {j:2, i:4}</span>\n<span class=\"go\">[[1 3 5 7]</span>\n<span class=\"go\"> [2 4 6 8]]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">),</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;ntensor {j:2, i:4}</span>\n<span class=\"go\">[[1 3 5 7]</span>\n<span class=\"go\"> [2 4 6 8]]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">],</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2, j:4}</span>\n<span class=\"go\">[[1 2 5 6]</span>\n<span class=\"go\"> [3 4 7 8]]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.stack", "modulename": "numbat", "qualname": "stack", "kind": "function", "doc": "<p>Join a squence of ntensor along a new axis into a new ntensor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arrays</strong> (Iterable[ntensor]):\nThe tensors must have the same shape</li>\n<li><strong>axis</strong> (str|Axis):\nThe axis along which to be joined</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (ntensor):\nThe concatenated ntensor</li>\n</ul>\n\n<h6 id=\"see-also\">See Also</h6>\n\n<p><code>concatenate</code>  </p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2} [5 9]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3, j:2}</span>\n<span class=\"go\">[[1 4]</span>\n<span class=\"go\"> [2 5]</span>\n<span class=\"go\"> [3 6]]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"p\">((</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3, j:2}</span>\n<span class=\"go\">[[1 4]</span>\n<span class=\"go\"> [2 5]</span>\n<span class=\"go\"> [3 6]]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">axis</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.dot", "modulename": "numbat", "qualname": "dot", "kind": "function", "doc": "<p>Do inner products or outer products or matrix multiplication or tensor multiplication or einstein\nsummation or batched versions of any of these.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arrays</strong>: The <code>NTensor</code> objects to operate on. In principle, the order does not matter. (Though it may affect\nthe internal layout of the data.)</li>\n<li><strong>keep</strong>: Any shared indices you don't want reduced.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong>: Reduced <code>NTensor</code></li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Inner product</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} 310&gt;</span>\n</code></pre>\n</div>\n\n<p>Elementwise product</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;ntensor {i:3} [ 10   0 300]&gt;</span>\n</code></pre>\n</div>\n\n<p>Outer product</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:2, j:3}</span>\n<span class=\"go\">[[ 0  0  0]</span>\n<span class=\"go\"> [10 20 30]]&gt;</span>\n</code></pre>\n</div>\n\n<p>Matrix-vector multiplication</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:5} [ True  True  True  True  True]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(j=4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict()</span>\n</code></pre>\n</div>\n\n<p>Matrix-matrix multiplication</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, k=7)</span>\n</code></pre>\n</div>\n\n<p>Tensor multiplication / Einstein summation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, m=9)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, j=6, m=9)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">keep</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;l&#39;</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, k=7, l=8, m=9)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span> <span class=\"o\">|</span> <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">Number</span>,</span><span class=\"param\">\t<span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.axes", "modulename": "numbat", "qualname": "axes", "kind": "function", "doc": "<p>Convenience function to create a bunch of axes at once</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*names</strong> (str):\nnames to give to each element. pass none if you want them to be inferred</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out_axes</strong> (tuple[Axis]):\nsequence of tuples</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">(</span><span class=\"s1\">&#39;rows&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cols&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;batch&#39;</span><span class=\"p\">)</span> <span class=\"c1\"># safe boring redudnancy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;rows&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cols</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;cols&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;batch&#39;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">cols</span><span class=\"p\">,</span> <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">axes</span><span class=\"p\">()</span> <span class=\"c1\"># exciting evil magic</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;rows&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cols</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;cols&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">_name</span>\n<span class=\"go\">&#39;batch&#39;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.allclose", "modulename": "numbat", "qualname": "allclose", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">arrays</span><span class=\"p\">:</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>, </span><span class=\"param\"><span class=\"n\">rtol</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span>, </span><span class=\"param\"><span class=\"n\">atol</span><span class=\"o\">=</span><span class=\"mf\">1e-08</span>, </span><span class=\"param\"><span class=\"n\">equal_nan</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.ones", "modulename": "numbat", "qualname": "ones", "kind": "function", "doc": "<p>Convenience function, over just using <code>np.ones</code> and then <code>ntensor</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**axes</strong> (Dict[str,int]):\nMapping from axes to sizes. Will be converted to axes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>A</strong> (array):\nArray with given shape</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{i:5}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">cats</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">dogs</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"go\">{cats:5, dogs:15}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.zeros", "modulename": "numbat", "qualname": "zeros", "kind": "function", "doc": "<p>Convenience function, over just using <code>np.zeros</code> and then <code>array</code>. Use just like <code>ones</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">ntensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.randn", "modulename": "numbat", "qualname": "randn", "kind": "function", "doc": "<p>Convenience function, to call <code>np.random.randn</code> and then <code>ntensor</code>. Use just like\n<code>ones</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>**kwargs</strong> (int):\nkeyword arguments mapping strings to ints</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>out</strong> (<code>ntensor</code>):\nrandom data with requested shape</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">ShapeDict(i=5, j=10, k=100)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.vmap", "modulename": "numbat", "qualname": "vmap", "kind": "function", "doc": "<p>Implements almost all of vmap. The only difference here is that for simplicity we require\nthat in_axes and out_ax are provided in the wrapper call.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fun</strong>: The function to be vmapped</li>\n<li><strong>in_axes</strong>: What input axis to map each argument over. If just given a single axis, all arguments that\nare <code>array</code>s and contain that axis are mapped over it and all other arguments are mapped\nover None.</li>\n<li><strong>other</strong>: iterable of other axes or None. If None (default), ignored. Otherwise, used as a check: all axes\nthat appear in any argument must either appear in in_axes or other.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>vfun</strong>: vmapped function</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">add_scalar</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [3 5 7]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">add_scalar</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [3 4 5]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">add_scalar</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">])(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3, j:2}</span>\n<span class=\"go\">[[10 20]</span>\n<span class=\"go\"> [11 21]</span>\n<span class=\"go\"> [12 22]]&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">myfun</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vmap</span><span class=\"p\">(</span><span class=\"n\">myfun</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3, j:2}</span>\n<span class=\"go\">[[ 0 30]</span>\n<span class=\"go\"> [ 1 41]</span>\n<span class=\"go\"> [ 2 52]]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">in_axes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">,</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.batch", "modulename": "numbat", "qualname": "batch", "kind": "function", "doc": "<p>Create a batched version of a function</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fun</strong>: function to be batched</li>\n<li><strong>axes</strong> (Set[Axis|Str]):\naxes to be batched. Must be an <code>Axis</code> or str.</li>\n<li><strong>other:</strong>: optional: All other axes (for checking only)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>new_fun</strong>: batched function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">axes</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">frozenset</span><span class=\"p\">()</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">numbat</span><span class=\"o\">.</span><span class=\"n\">Axis</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.wrap", "modulename": "numbat", "qualname": "wrap", "kind": "function", "doc": "<p>Wrap a function so it can LATER be batched or vmapped by providing <code>axes</code> or <code>vmap_axes</code>\narguments.</p>\n\n<p><code>wrap(fun)(A, B, axes={i,j})</code> is equivalent to <code>batch(fun, {i,j})(A, B)</code></p>\n\n<p><code>wrap(fun)(A, B, vmap={k,l})</code> is equivalent to <code>vmap(fun, {k,l})(A, B)</code></p>\n\n<p><code>wrap(fun)(A, B, axes={i,j}, vmap={k,l})</code> is equivalent to <code>vmap(fun, {k,l}, other={i,j})(A, B)</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.scan", "modulename": "numbat", "qualname": "scan", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"n\">init</span>, </span><span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"n\">in_axis</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.lift", "modulename": "numbat", "qualname": "lift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">jax_fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">axes_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out_axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">batched</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.lower", "modulename": "numbat", "qualname": "lower", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fun</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">axes_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out_axes</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "numbat.abs", "modulename": "numbat", "qualname": "abs", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.acos", "modulename": "numbat", "qualname": "acos", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.acosh", "modulename": "numbat", "qualname": "acosh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arccos", "modulename": "numbat", "qualname": "arccos", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arccosh", "modulename": "numbat", "qualname": "arccosh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arcsin", "modulename": "numbat", "qualname": "arcsin", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arcsinh", "modulename": "numbat", "qualname": "arcsinh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arctan", "modulename": "numbat", "qualname": "arctan", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arctanh", "modulename": "numbat", "qualname": "arctanh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.asin", "modulename": "numbat", "qualname": "asin", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.asinh", "modulename": "numbat", "qualname": "asinh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.atan", "modulename": "numbat", "qualname": "atan", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.atanh", "modulename": "numbat", "qualname": "atanh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.ceil", "modulename": "numbat", "qualname": "ceil", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.conj", "modulename": "numbat", "qualname": "conj", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.cos", "modulename": "numbat", "qualname": "cos", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.cosh", "modulename": "numbat", "qualname": "cosh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.deg2rad", "modulename": "numbat", "qualname": "deg2rad", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.exp", "modulename": "numbat", "qualname": "exp", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.exp2", "modulename": "numbat", "qualname": "exp2", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.expm1", "modulename": "numbat", "qualname": "expm1", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.i0", "modulename": "numbat", "qualname": "i0", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.imag", "modulename": "numbat", "qualname": "imag", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.log", "modulename": "numbat", "qualname": "log", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.log10", "modulename": "numbat", "qualname": "log10", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.log1p", "modulename": "numbat", "qualname": "log1p", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.log2", "modulename": "numbat", "qualname": "log2", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.rad2deg", "modulename": "numbat", "qualname": "rad2deg", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.real", "modulename": "numbat", "qualname": "real", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.reciprocal", "modulename": "numbat", "qualname": "reciprocal", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.rint", "modulename": "numbat", "qualname": "rint", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.round", "modulename": "numbat", "qualname": "round", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sign", "modulename": "numbat", "qualname": "sign", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sin", "modulename": "numbat", "qualname": "sin", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sinc", "modulename": "numbat", "qualname": "sinc", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sinh", "modulename": "numbat", "qualname": "sinh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sqrt", "modulename": "numbat", "qualname": "sqrt", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.square", "modulename": "numbat", "qualname": "square", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.tan", "modulename": "numbat", "qualname": "tan", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.tanh", "modulename": "numbat", "qualname": "tanh", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.trunc", "modulename": "numbat", "qualname": "trunc", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.relu", "modulename": "numbat", "qualname": "relu", "kind": "function", "doc": "<p>Elementwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.nn.html\"><code>jax.nn</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.add", "modulename": "numbat", "qualname": "add", "kind": "function", "doc": "<p>Pairwise operation defined simply as <code>wrap_jax_pairwise(jnp.add)</code>\n(see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.arctan2", "modulename": "numbat", "qualname": "arctan2", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.atan2", "modulename": "numbat", "qualname": "atan2", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.divide", "modulename": "numbat", "qualname": "divide", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.divmod", "modulename": "numbat", "qualname": "divmod", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.equal", "modulename": "numbat", "qualname": "equal", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.floor_divide", "modulename": "numbat", "qualname": "floor_divide", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.gcd", "modulename": "numbat", "qualname": "gcd", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.greater", "modulename": "numbat", "qualname": "greater", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.greater_equal", "modulename": "numbat", "qualname": "greater_equal", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.heaviside", "modulename": "numbat", "qualname": "heaviside", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.hypot", "modulename": "numbat", "qualname": "hypot", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.lcm", "modulename": "numbat", "qualname": "lcm", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.ldexp", "modulename": "numbat", "qualname": "ldexp", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.less", "modulename": "numbat", "qualname": "less", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.less_equal", "modulename": "numbat", "qualname": "less_equal", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.logaddexp", "modulename": "numbat", "qualname": "logaddexp", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.logaddexp2", "modulename": "numbat", "qualname": "logaddexp2", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.maximum", "modulename": "numbat", "qualname": "maximum", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.minimum", "modulename": "numbat", "qualname": "minimum", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.multiply", "modulename": "numbat", "qualname": "multiply", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.mod", "modulename": "numbat", "qualname": "mod", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.nextafter", "modulename": "numbat", "qualname": "nextafter", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.not_equal", "modulename": "numbat", "qualname": "not_equal", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.polyadd", "modulename": "numbat", "qualname": "polyadd", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.polymul", "modulename": "numbat", "qualname": "polymul", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.polysub", "modulename": "numbat", "qualname": "polysub", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.polyval", "modulename": "numbat", "qualname": "polyval", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.pow", "modulename": "numbat", "qualname": "pow", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.power", "modulename": "numbat", "qualname": "power", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.remainder", "modulename": "numbat", "qualname": "remainder", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.subtract", "modulename": "numbat", "qualname": "subtract", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.true_divide", "modulename": "numbat", "qualname": "true_divide", "kind": "function", "doc": "<p>Pairwise operation (see same operation in <a href=\"https://docs.jax.dev/en/latest/jax.numpy.html\"><code>jax.numpy</code></a>)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.all", "modulename": "numbat", "qualname": "all", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.all.html\"><code>jax.numpy.all</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.any", "modulename": "numbat", "qualname": "any", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.any.html\"><code>jax.numpy.any</code></a>. Call \nwith <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.logsumexp", "modulename": "numbat", "qualname": "logsumexp", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.nn.logsumexp.html\"><code>jax.nn.logsumexp</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.max", "modulename": "numbat", "qualname": "max", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.max.html\"><code>jax.numpy.max</code></a>. Call \nwith <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.mean", "modulename": "numbat", "qualname": "mean", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.mean.html\"><code>jax.numpy.mean</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.median", "modulename": "numbat", "qualname": "median", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.median.html\"><code>jax.numpy.median</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.min", "modulename": "numbat", "qualname": "min", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.min.html\"><code>jax.numpy.min</code></a>. Call \nwith <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.prod", "modulename": "numbat", "qualname": "prod", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.prod.html\"><code>jax.numpy.prod</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.sum", "modulename": "numbat", "qualname": "sum", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.sum.html\"><code>jax.numpy.sum</code></a>. Call \nwith <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.std", "modulename": "numbat", "qualname": "std", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.std.html\"><code>jax.numpy.std</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.var", "modulename": "numbat", "qualname": "var", "kind": "function", "doc": "<p>Wraps <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.numpy.var.html\"><code>jax.numpy.var</code></a>. \nCall with <code>axes</code> to reduce or <code>vmap_axes</code> to <em>not</em> reduce.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.grad", "modulename": "numbat", "qualname": "grad", "kind": "function", "doc": "<p>A thin wrapper around <a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.grad.html\"><code>jax.grad</code></a>. All\nthis really does is convert the final <code>NTensor</code> output to a jax value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fun</strong>: The function you will take the gradient of</li>\n<li><strong>argnums</strong>: Optional, integer or sequence of integers, specifying what arguments to take gradient with respect\nto. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>grad_fun</strong>: Gradient function</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad_sum</span> <span class=\"o\">=</span> <span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [1. 1. 1.]&gt;</span>\n</code></pre>\n</div>\n\n<p>You can use regular jax grad if you really want to (this is effectively all this function does).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mysum</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">arg</span><span class=\"p\">:</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">()</span> <span class=\"c1\"># converts to jax float</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {} 3.0&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mysum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Array(3., dtype=float32)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad_sum</span> <span class=\"o\">=</span> <span class=\"n\">jax</span><span class=\"o\">.</span><span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">mysum</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grad_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {i:3} [1. 1. 1.]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"n\">argnums</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.value_and_grad", "modulename": "numbat", "qualname": "value_and_grad", "kind": "function", "doc": "<p>A thin wrapper around\n<a href=\"https://docs.jax.dev/en/latest/_autosummary/jax.value_and_grad.html\"><code>jax.value_and_grad</code></a>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fun</strong>: The function you will take the gradient of</li>\n<li><strong>argnums</strong>: Optional, integer or sequence of integers, specifying what arguments to take gradient with respect\nto. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>value_and_grad_fun</strong>: Function that returns the value and the gradient</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value_and_grad_sum</span> <span class=\"o\">=</span> <span class=\"n\">value_and_grad</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value_and_grad_sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(&lt;ntensor {} 3.0&gt;, &lt;ntensor {i:3} [1. 1. 1.]&gt;)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fun</span>, </span><span class=\"param\"><span class=\"n\">argnums</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.solve", "modulename": "numbat", "qualname": "solve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "numbat.inv", "modulename": "numbat", "qualname": "inv", "kind": "function", "doc": "<p>Take an inverse</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>: 2-D NTensor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>b</strong>: Inverse NTensor</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([[</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;j&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;ntensor {j:2 i:2}</span>\n<span class=\"go\">[[0.5 0. ]</span>\n<span class=\"go\"> [0.  1. ]]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ntensor</span><span class=\"p\">([</span><span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">],</span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span>\n<span class=\"go\">&lt;ntensor {j:2} [2.5 3. ]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">@</span> <span class=\"n\">x</span>\n<span class=\"go\">&lt;ntensor {i:2} [5. 3.]&gt;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">axes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">vmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();